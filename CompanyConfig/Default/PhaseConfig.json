{
  "DemandAnalysis": {
    "assistant_role_name": "Chief Product Officer",
    "user_role_name": "Chief Executive Officer",
    "phase_prompt": [
      "**ECUSTdev** 之前已经开发过以下形式的产品：",
      "图像：可以以折线图、柱状图、流程图、云图、甘特图等形式呈现信息。",
      "文档：可以通过 .docx 文件呈现信息。",
      "幻灯片：可以通过 .pptx 文件呈现信息。",
      "表格：可以通过 .xlsx 文件呈现信息。",
      "PDF：可以通过 .pdf 文件呈现信息。",
      "网站：可以通过 .html 文件展示个人简历、教程、产品或想法。",
      "应用程序：可以通过 Python 实现可视化的游戏、软件、工具等。",
      "仪表盘：可以显示实时信息的面板。",
      "思维导图：可以围绕一个核心概念展示相关想法。",
      "作为 {assistant_role}，为了满足新用户的需求并确保产品可实现，您需要与我讨论决定产品应采用哪种形式？",
      "请注意，我们只能讨论产品的形式，不要讨论其他内容！一旦我们双方都表达了自己的意见并一致同意讨论的结果，任何一方都必须主动结束讨论，回复一行文字，以单个单词 <INFO> 开头，后面紧跟我们最终决定的产品形式，例如：\"<INFO> 幻灯片\"。"
    ]
  },
  "LanguageChoose": {
    "assistant_role_name": "Chief Technology Officer",
    "user_role_name": "Chief Executive Officer",
    "phase_prompt": [
      "根据新用户的任务和以下一些创意构思：",
      "任务：\"{task}\"。",
      "形式：\"{modality}\"。",
      "想法：\"{ideas}\"。",
      "我们决定通过一种编程语言实现一个可执行的软件。",
      "作为 {assistant_role}，为了满足新用户的需求并使软件可实现，您应该提出一种具体的编程语言。如果可以通过 Python 完成此任务，请回答 Python；否则，请回答另一种编程语言（例如 Java、C++ 等）。",
      "请注意，我们只能讨论目标编程语言，不要讨论其他内容！一旦我们双方都表达了自己的意见并一致同意讨论的结果，任何一方都必须主动结束讨论，并以以下格式总结我们讨论的最佳编程语言，仅返回一行文字，例如：\"<INFO> *\"，其中 \"*\" 代表编程语言。"
    ]
  },
  "Coding": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Chief Technology Officer",
    "phase_prompt": [
      "根据新用户的任务和我们的软件设计，以下是相关信息：",
      "任务：\"{task}\"。",
      "任务描述：\"{description}\"。",
      "形式：\"{modality}\"。",
      "编程语言：\"{language}\"",
      "想法：\"{ideas}\"",
      "我们决定通过 {language} 实现一个可执行的软件，包含多个文件。作为 {assistant_role}，为了满足新用户的需求，您需要将架构的每个细节最终实现为代码。{gui}",
      "请逐步思考并做出正确的决策，以确保我们做对。",
      "您需要首先列出核心类、函数、方法的名称，并简要说明它们的用途。",
      "然后，您需要输出每个文件的内容，包括完整的代码。每个文件必须严格遵循 Markdown 代码块格式，其中以下标记需要替换为实际内容：",
      "FILENAME（文件名，包括扩展名，小写）",
      "LANGUAGE（编程语言）",
      "DOCSTRING（文档字符串，用于说明代码段的用途）",
      "CODE（原始代码）",
      "格式如下：",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```",
      "请从主文件开始，然后依次输出被主文件导入的文件，依此类推。",
      "请注意，代码必须是完全可运行的。确保实现所有功能。不要使用占位符（例如 Python 中的 'pass'）。"
    ]
  },
  "ArtDesign": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Chief Creative Officer",
    "phase_prompt": [
      "我们开发的源代码和相应的测试报告如下：",
      "任务：\"{task}\"。",
      "编程语言：\"{language}\"",
      "源代码：",
      "\"{codes}\"",
      "请注意，每个文件必须严格遵循 Markdown 代码块格式，其中以下标记需要替换为实际内容：",
      "FILENAME（文件名，包括扩展名，小写）",
      "LANGUAGE（编程语言）",
      "DOCSTRING（文档字符串，用于说明代码段的用途）",
      "CODE（原始代码）",
      "格式如下：",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```",
      "作为 {assistant_role}，为了满足新用户的需求并为软件配备美观的图形用户界面（GUI），我们将讨论并设计许多用于 GUI 装饰的装饰图像。现在，我们通过列出一些功能独立的 GUI 元素来继续讨论 GUI 的美化，这些元素被认为可以用不同的图片进行装饰。例如，计算器中的十个数字（0-9）是功能独立的。",
      "回答时，请使用以下格式：\" FILENAME.png: DESCRIPTION\"，其中 \"FILENAME\" 是图像的文件名，\"DESCRIPTION\" 是独立元素的详细描述。例如：",
      "'''",
      "button_1.png: 标有数字 \"1\" 的按钮。",
      "button_multiply.png: 标有乘法符号（\"*\"）的按钮。",
      "background.png: 用于装饰围棋游戏的背景颜色。",
      "'''",
      "现在，请尽可能多地列出所有功能独立的元素。"
    ]
  },
  "ArtIntegration": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Chief Creative Officer",
    "phase_prompt": [
      "我们开发的源代码和相应的测试报告如下：",
      "任务：\"{task}\"。",
      "编程语言：\"{language}\"",
      "源代码：",
      "\"{codes}\"",
      "请注意，每个文件必须严格遵循 Markdown 代码块格式，其中以下标记需要替换为实际内容：",
      "FILENAME（文件名，包括扩展名，小写）",
      "LANGUAGE（编程语言）",
      "DOCSTRING（文档字符串，用于说明代码段的用途）",
      "CODE（原始代码）",
      "格式如下：",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```",
      "作为 {assistant_role}，为了满足新用户的需求并为软件配备美观的图形用户界面（GUI），您将把我们设计的图像整合到 GUI 中进行装饰。这里有一些现成的高质量图片及其描述：",
      "{images}",
      "请注意，设计的图像大小固定为 256x256 像素，图像位于所有 Python 文件所在的同一目录中；请根据 GUI 的大小动态调整这些图像的大小，并使用 \"self.*\" 以避免因自动垃圾回收导致的显示问题。例如：",
      "```",
      "self.image = ImageTk.PhotoImage(Image.open(\"./image.png\").resize((50, 50)))",
      "```",
      "现在，请将一些或全部图片整合到 GUI 中，使其更加美观和富有创意。输出代码，严格遵循上述要求的格式。"
    ]
  },
  "CodeComplete": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Chief Technology Officer",
    "phase_prompt": [
      "根据新用户的任务和我们的软件设计：",
      "任务：\"{task}\"。",
      "形式：\"{modality}\"。",
      "编程语言：\"{language}\"",
      "代码：",
      "\"{codes}\"",
      "未实现的文件：",
      "\"{unimplemented_file}\"",
      "在我们的软件中，每个文件必须严格遵循 Markdown 代码块格式，其中以下标记需要替换为实际内容：",
      "FILENAME（文件名，包括扩展名，小写）",
      "LANGUAGE（编程语言）",
      "DOCSTRING（文档字符串，用于说明代码段的用途）",
      "CODE（原始代码）",
      "格式如下：",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```",
      "作为 {assistant_role}，为了满足软件的完整功能，您需要在 {unimplemented_file} 文件中实现所有方法，并输出完整的代码，严格遵循上述格式。"
    ]
  },
  "CodeReviewComment": {
    "assistant_role_name": "Code Reviewer",
    "user_role_name": "Programmer",
    "phase_prompt": [
      "根据新用户的任务和我们的软件设计：",
      "任务：\"{task}\"。",
      "形式：\"{modality}\"。",
      "编程语言：\"{language}\"",
      "想法：\"{ideas}\"",
      "代码：",
      "\"{codes}\"",
      "为了使软件可以直接运行而无需进一步编码，ChatDev 制定了以下规定：",
      "1) 所有引用的类都必须导入；",
      "2) 所有方法都必须实现；",
      "3) 所有方法都需要必要的注释；",
      "4) 没有潜在的错误；",
      "5) 整个项目符合用户提出的需求；",
      "6) 最重要的是，不仅要检查代码中的错误，还要检查代码的逻辑。确保用户可以与生成的软件交互，而不丢失任何需求中的功能；",
      "现在，请您逐一检查上述规定，并详细审查代码，提出优先级最高的评论，并给出修改建议。如果您认为代码完美无缺，没有任何评论，请返回一行文字，例如：\"<INFO> 完成\"。"
    ]
  },
  "CodeReviewModification": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Code Reviewer",
    "phase_prompt": [
      "根据新用户的任务、我们的产品形式、语言和想法，以下是我们的第一版源代码：",
      "任务：\"{task}\"。",
      "形式：\"{modality}\"。",
      "编程语言：\"{language}\"",
      "想法：\"{ideas}\"",
      "代码：",
      "\"{codes}\"",
      "代码评论：",
      "\"{comments}\"",
      "在软件中，每个文件必须严格遵循 Markdown 代码块格式，其中以下标记需要替换为实际内容：",
      "FILENAME（文件名，包括扩展名，小写）",
      "LANGUAGE（编程语言）",
      "DOCSTRING（文档字符串，用于说明代码段的用途）",
      "CODE（原始代码）",
      "格式如下：",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```",
      "作为 {assistant_role}，为了满足新用户的需求并使软件具有创造性、可执行性和鲁棒性，您需要根据评论修改相应的代码。然后，输出完整且完整的代码，修复所有基于评论的错误。返回所有代码，严格遵循上述格式。"
    ]
  },
  "TestErrorSummary": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Software Test Engineer",
    "phase_prompt": [
      "我们开发的源代码和相应的测试报告如下：",
      "编程语言：\"{language}\"",
      "源代码：",
      "\"{codes}\"",
      "源代码的测试报告：",
      "\"{test_reports}\"",
      "根据我的测试报告，请您定位并总结导致问题的错误。"
    ]
  },
  "TestModification": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Software Test Engineer",
    "phase_prompt": [
      "我们开发的源代码和相应的测试报告如下：",
      "编程语言：\"{language}\"",
      "源代码：",
      "\"{codes}\"",
      "源代码的测试报告：",
      "\"{test_reports}\"",
      "测试报告中的错误总结：",
      "\"{error_summary}\"",
      "请注意，每个文件必须严格遵循 Markdown 代码块格式，其中以下标记需要替换为实际内容：",
      "FILENAME（文件名，包括扩展名，小写）",
      "LANGUAGE（编程语言）",
      "DOCSTRING（文档字符串，用于说明代码段的用途）",
      "CODE（原始代码）",
      "格式如下：",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```",
      "作为 {assistant_role}，为了满足新用户的需求并使软件运行顺畅且鲁棒，您需要根据错误总结修改代码。现在，请按照上述格式修改有问题的代码，并输出修复后的代码以及相应的解释（严格遵循上述格式，包括 FILENAME、LANGUAGE、DOCSTRING 和 CODE；禁止不完整的“TODO”代码）。如果没有报告错误，请返回一行文字，例如：\"<INFO> 完成\"。"
    ]
  },
  "EnvironmentDoc": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Chief Technology Officer",
    "phase_prompt": [
      "新用户的任务和我们开发的代码如下：",
      "任务：\"{task}\"。",
      "形式：\"{modality}\"。",
      "编程语言：\"{language}\"",
      "想法：\"{ideas}\"",
      "代码：",
      "\"{codes}\"",
      "作为 {assistant_role}，您需要编写一个 requirements.txt 文件，这是 Python 项目中常用的文件，用于指定项目正常运行所需的依赖项或包。它是一种标准化的方式来记录和管理项目的依赖项。例如：",
      "requirements.txt",
      "```",
      "numpy==1.19.2",
      "pandas>=1.1.4",
      "```",
      "根据上述代码和文件格式，编写一个 requirements.txt 文件，以指定项目正常运行所需的依赖项或包。"
    ]
  },
  "Manual": {
    "assistant_role_name": "Chief Product Officer",
    "user_role_name": "Chief Executive Officer",
    "phase_prompt": [
      "新用户的任务、我们开发的代码和所需的依赖项如下：",
      "任务：\"{task}\"。",
      "形式：\"{modality}\"。",
      "编程语言：\"{language}\"",
      "想法：\"{ideas}\"",
      "代码：",
      "\"{codes}\"",
      "依赖项：",
      "\"{requirements}\"",
      "作为 {assistant_role}，请使用 Markdown 编写一个 manual.md 文件，这是一个详细的用户手册，用于指导用户如何使用该软件，包括软件的主要功能、如何安装环境依赖项以及如何使用/运行它。例如：",
      "manual.md",
      "```",
      "# LangChain",
      "通过组合性构建基于大型语言模型（LLMs）的应用程序",
      "寻找 JavaScript/TypeScript 版本？请查看 LangChain.js。",
      "**生产支持**：当您将 LangChain 应用程序投入生产时，我们很乐意提供更全面的支持。",
      "请填写此表单，我们将为您设置专用的支持 Slack 频道。",
      "## 快速安装",
      "`pip install langchain`",
      "或",
      "`conda install langchain -c conda-forge`",
      "## 🤔 这是什么？",
      "大型语言模型（LLMs）作为一种变革性技术正在兴起，使开发者能够构建以前无法实现的应用程序。然而，仅使用这些 LLMs 是不够的，真正的力量来自于将它们与其他计算或知识源结合使用。",
      "该库旨在协助开发此类应用程序。这些应用程序的常见示例包括：",
      "**❓ 针对特定文档的问题回答**",
      "- 文档",
      "- 完整示例：Notion 数据库上的问题回答",
      "**🤖 代理程序**",
      "- 文档",
      "- 完整示例：GPT + WolframAlpha",
      "## 📖 文档",
      "请查看 [此处](https://python.langchain.com) 获取完整文档：",
      "- 入门（安装、设置环境、简单示例）",
      "- 如何操作示例（演示、集成、辅助函数）",
      "- 参考（完整 API 文档）",
      "- 资源（核心概念的高级解释）",
      "```"
    ]
  }
}